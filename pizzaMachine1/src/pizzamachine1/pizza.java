/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pizzamachine1;

import java.util.ArrayList;
//import java.util.logging.Level;
//import java.util.logging.Logger;

import javax.swing.JOptionPane;

/**
 *
 * @author hp
 */
public class pizza extends javax.swing.JFrame {

    ArrayList<ingredient> addEngArr = new ArrayList<>();
    int size = 0;
    int thickness;
    mixer mixS=new mixer();
    /**
     * Creates new form pizza
     */
    public pizza() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        small = new javax.swing.JButton();
        larg = new javax.swing.JButton();
        medum = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        order = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        thick = new javax.swing.JButton();
        thin = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        numOFslice = new javax.swing.JTextField();
        Pepperoni = new javax.swing.JCheckBox();
        Meat = new javax.swing.JCheckBox();
        chicken = new javax.swing.JCheckBox();
        oregano = new javax.swing.JCheckBox();
        sauce = new javax.swing.JCheckBox();
        onion = new javax.swing.JCheckBox();
        garlic = new javax.swing.JCheckBox();
        tomatoes = new javax.swing.JCheckBox();
        mozzarella = new javax.swing.JCheckBox();
        confirmation = new javax.swing.JButton();
        Cancel = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 51, 51));
        jLabel1.setText("Fast Pizza");
        jLabel1.setToolTipText("");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Choose the size");

        small.setText("S");
        small.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smallActionPerformed(evt);
            }
        });

        larg.setText("L");
        larg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                largActionPerformed(evt);
            }
        });

        medum.setText("M");
        medum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medumActionPerformed(evt);
            }
        });

        order.setColumns(20);
        order.setRows(5);
        order.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Your Order", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 18), new java.awt.Color(255, 51, 0))); // NOI18N
        jScrollPane1.setViewportView(order);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Choose the ingredient");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Choose the dough");

        thick.setText("thick");
        thick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thickActionPerformed(evt);
            }
        });

        thin.setText("thin");
        thin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thinActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("number of slice");

        numOFslice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numOFsliceActionPerformed(evt);
            }
        });

        Pepperoni.setText("Pepperoni pizza");
        Pepperoni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PepperoniActionPerformed(evt);
            }
        });

        Meat.setText("Meat pizza");
        Meat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MeatActionPerformed(evt);
            }
        });

        chicken.setText("Chicken pizza ");
        chicken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chickenActionPerformed(evt);
            }
        });

        oregano.setText("Oregano");
        oregano.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oreganoActionPerformed(evt);
            }
        });

        sauce.setText("Pizza sauce");
        sauce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sauceActionPerformed(evt);
            }
        });

        onion.setText("Onion");
        onion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onionActionPerformed(evt);
            }
        });

        garlic.setText("Garlic");
        garlic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                garlicActionPerformed(evt);
            }
        });

        tomatoes.setText("Tomatoes");
        tomatoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tomatoesActionPerformed(evt);
            }
        });

        mozzarella.setText("Mozzarella cheese");
        mozzarella.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mozzarellaActionPerformed(evt);
            }
        });

        confirmation.setText("Complete");
        confirmation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmationActionPerformed(evt);
            }
        });

        Cancel.setText("Cancel");
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Choose the type");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(small, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(larg, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(medum, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(90, 90, 90)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(thick)
                                    .addComponent(thin, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(Cancel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numOFslice, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(confirmation))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mozzarella)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(Meat, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(oregano, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(sauce, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(onion, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(garlic, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tomatoes, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(chicken, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Pepperoni, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(20, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 4, Short.MAX_VALUE)
                        .addComponent(mozzarella)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tomatoes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(garlic)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(onion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sauce)
                            .addComponent(confirmation)
                            .addComponent(Cancel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(numOFslice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(small)
                                .addComponent(thick)))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(medum)
                            .addComponent(thin))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(larg)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(oregano)
                        .addGap(14, 14, 14)
                        .addComponent(jLabel6)
                        .addGap(5, 5, 5)
                        .addComponent(chicken)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Meat)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Pepperoni)
                        .addGap(37, 37, 37))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void largActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_largActionPerformed
        // TODO add your handling code here:
        size = 3;
    }//GEN-LAST:event_largActionPerformed

    private void smallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smallActionPerformed
        // TODO add your handling code here
        size = 1;
    }//GEN-LAST:event_smallActionPerformed

    private void medumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medumActionPerformed
        // TODO add your handling code here:
        size = 2;
    }//GEN-LAST:event_medumActionPerformed

    private void thinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thinActionPerformed
        // TODO add your handling code here:
        thickness = 1;
    }//GEN-LAST:event_thinActionPerformed

    private void thickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thickActionPerformed
        // TODO add your handling code here:
        thickness = 2;
    }//GEN-LAST:event_thickActionPerformed

    private void mozzarellaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mozzarellaActionPerformed
        // TODO add your handling code here:
        switch (size) {
            case 3: {
                ingredient mozzarella = new ingredient("mozzarella", 240, 552);
               
                pizzaClass p=new pizzaClass();
               try{
               ingredient.decrease(p.getMozzarella1().getWeight(),240,"mozzarella");
                      }catch (quantityOutException1 e){
                JOptionPane.showMessageDialog(null, e.toString());
                    
                    }   
                addEngArr.add(mozzarella);
                break;
            }
            case 2: {
                ingredient mozzarella = new ingredient("mozzarella", 170, 394);
                
                pizzaClass p=new pizzaClass();
               try{
               ingredient.decrease(p.getMozzarella1().getWeight(),170,"mozzarella");
                      }catch (quantityOutException1 e){
                JOptionPane.showMessageDialog(null, e.toString());
                    
                    }   
               addEngArr.add(mozzarella);
                break;
            }
            case 1: {
                ingredient mozzarella = new ingredient("mozzarella", 100, 220);
               
               pizzaClass p=new pizzaClass();
               try{
               ingredient.decrease(p.getMozzarella1().getWeight(),100,"mozzarella");
                      }catch (quantityOutException1 e){
                JOptionPane.showMessageDialog(null, e.toString());
                    
                    }  
               addEngArr.add(mozzarella);
                break;
            }
           
        }

    }//GEN-LAST:event_mozzarellaActionPerformed

    private void tomatoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tomatoesActionPerformed
        // TODO add your handling code here:
        switch (size) {
            
            case 3: {
                ingredient tomatoes = new ingredient("tomatoes", 100, 18);
                
                pizzaClass p=new pizzaClass();
               try{
               ingredient.decrease(p.getTomatoes1().getWeight(),100,"tomatoes");
                      }catch (quantityOutException1 e){
                JOptionPane.showMessageDialog(null, e.toString());
                    
                    } 
               addEngArr.add(tomatoes);
                break;
            }
            case 2: {
                ingredient tomatoes = new ingredient("tomatoes", 70, 12);
                
                pizzaClass p=new pizzaClass();
               try{
               ingredient.decrease(p.getTomatoes1().getWeight(),70,"tomatoes");
                      }catch (quantityOutException1 e){
                JOptionPane.showMessageDialog(null, e.toString());
                    
                    }  
               addEngArr.add(tomatoes);
                break;
            }
            case 1: {
                ingredient tomatoes = new ingredient("tomatoes", 50, 9);
                
                pizzaClass p=new pizzaClass();
               try{
               ingredient.decrease(p.getTomatoes1().getWeight(),50,"tomatoes");
                      }catch (quantityOutException1 e){
                JOptionPane.showMessageDialog(null, e.toString());
                    
                    }  
               addEngArr.add(tomatoes);
                break;
            }
        }

    }//GEN-LAST:event_tomatoesActionPerformed

    private void garlicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_garlicActionPerformed
        // TODO add your handling code here:
        switch (size) {
            case 3: {
                ingredient garlic = new ingredient("garlic", 9, 14);
                
                pizzaClass p=new pizzaClass();
               try{
               ingredient.decrease(p.getGarlic1().getWeight(),9,"garlic");
                      }catch (quantityOutException1 e){
                JOptionPane.showMessageDialog(null, e.toString());
                    
                    } 
               addEngArr.add(garlic);
                break;
            }
            case 2: {
                ingredient garlic = new ingredient("garlic", 6, 10);
               
                pizzaClass p=new pizzaClass();
               try{
               ingredient.decrease(p.getGarlic1().getWeight(),6,"garlic");
                      }catch (quantityOutException1 e){
                JOptionPane.showMessageDialog(null, e.toString());
                    
                    } 
                addEngArr.add(garlic);
                break;
            }
            case 1: {
                ingredient garlic = new ingredient("garlic", 3, 4.5);
               
                pizzaClass p=new pizzaClass();
               try{
               ingredient.decrease(p.getGarlic1().getWeight(),3,"garlic");
                      }catch (quantityOutException1 e){
                JOptionPane.showMessageDialog(null, e.toString());
                    
                    }   
                addEngArr.add(garlic);
                break;
            }
        }

    }//GEN-LAST:event_garlicActionPerformed

    private void onionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onionActionPerformed
        // TODO add your handling code here:
        switch (size) {
            case 3: {
                ingredient onion = new ingredient("onion", 50, 20);
                pizzaClass p=new pizzaClass();
               try{
               ingredient.decrease(p.getOnion1().getWeight(),50,"onion");
                      }catch (quantityOutException1 e){
                JOptionPane.showMessageDialog(null, e.toString());
                   // return;
                    }   
                addEngArr.add(onion);
                break;
            }
            case 2: {
                ingredient onion = new ingredient("onion", 35, 15);
                  pizzaClass p=new pizzaClass();
               try{
               ingredient.decrease(p.getOnion1().getWeight(),35,"onion");
                      }catch (quantityOutException1 e){
                JOptionPane.showMessageDialog(null, e.toString());
                    
                    }   
                addEngArr.add(onion);
                break;
            }
            case 1: {
                ingredient onion = new ingredient("onion", 10, 8);
                  pizzaClass p=new pizzaClass();
               try{
               ingredient.decrease(p.getOnion1().getWeight(),10,"onion");
                      }catch (quantityOutException1 e){
                JOptionPane.showMessageDialog(null, e.toString());
                 //   return;
                    }   
                addEngArr.add(onion);
                break;
            }
        }

    }//GEN-LAST:event_onionActionPerformed

    private void sauceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sauceActionPerformed
        // TODO add your handling code here:
        switch (size) {
            case 3: {
                ingredient sauce = new ingredient("sauce", 40, 20);
                  pizzaClass p=new pizzaClass();
               try{
               ingredient.decrease(p.getSauce1().getWeight(),40,"sauce");
                      }catch (quantityOutException1 e){
                JOptionPane.showMessageDialog(null, e.toString());
                    return;
                    }   
                addEngArr.add(sauce);
                break;
            }
            case 2: {
                ingredient sauce = new ingredient("sauce", 30, 14);
                  pizzaClass p=new pizzaClass();
               try{
               ingredient.decrease(p.getSauce1().getWeight(),30,"sauce");
                      }catch (quantityOutException1 e){
                JOptionPane.showMessageDialog(null, e.toString());
                    return;
                    }   
                addEngArr.add(sauce);
                break;
            }
            case 1: {
                ingredient sauce = new ingredient("sauce", 20, 10);
                  pizzaClass p=new pizzaClass();
               try{
               ingredient.decrease(p.getSauce1().getWeight(),20,"sauce");
                      }catch (quantityOutException1 e){
                JOptionPane.showMessageDialog(null, e.toString());
                    return;
                    }   
                addEngArr.add(sauce);
                break;
            }
        }

    }//GEN-LAST:event_sauceActionPerformed

    private void oreganoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oreganoActionPerformed
        // TODO add your handling code here:
        switch (size) {
            case 3: {
                ingredient oregano = new ingredient("oregano", 10, 26.5);
                  pizzaClass p=new pizzaClass();
               try{
               ingredient.decrease(p.getOregano1().getWeight(),10,"oregano");
                      }catch (quantityOutException1 e){
                JOptionPane.showMessageDialog(null, e.toString());
                    return;
                    }   
                addEngArr.add(oregano);
                break;
            }
            case 2: {
                ingredient oregano = new ingredient("oregano", 7, 19);
                  pizzaClass p=new pizzaClass();
               try{
               ingredient.decrease(p.getOregano1().getWeight(),7,"oregano");
                      }catch (quantityOutException1 e){
                JOptionPane.showMessageDialog(null, e.toString());
                    return;
                    }   
                addEngArr.add(oregano);
                break;
            }
            case 1: {
                ingredient oregano = new ingredient("oregano", 5, 13);
                  pizzaClass p=new pizzaClass();
               try{
               ingredient.decrease(p.getOregano1().getWeight(),5,"oregano");
                      }catch (quantityOutException1 e){
                JOptionPane.showMessageDialog(null, e.toString());
                    return;
                    }   
                addEngArr.add(oregano);
                break;
            }
        }

    }//GEN-LAST:event_oreganoActionPerformed

    private void chickenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chickenActionPerformed
        // TODO add your handling code here:
        switch (size) {
            case 3: {
                ingredient chicken = new ingredient("chicken", 500, 825);
                  pizzaClass p=new pizzaClass();
               try{
               ingredient.decrease(p.getChicken1().getWeight(),500,"chicken");
                      }catch (quantityOutException1 e){
                JOptionPane.showMessageDialog(null, e.toString());
                    return;
                    }   
                addEngArr.add(chicken);
                break;
            }
            case 2: {
                ingredient chicken = new ingredient("chicken", 350, 590);
                  pizzaClass p=new pizzaClass();
               try{
               ingredient.decrease(p.getChicken1().getWeight(),350,"chicken");
                      }catch (quantityOutException1 e){
                JOptionPane.showMessageDialog(null, e.toString());
                    return;
                    }   
                addEngArr.add(chicken);
                break;
            }
            case 1: {
                ingredient chicken = new ingredient("chicken", 200, 412);
                  pizzaClass p=new pizzaClass();
               try{
               ingredient.decrease(p.getChicken1().getWeight(),200,"chicken");
                      }catch (quantityOutException1 e){
                JOptionPane.showMessageDialog(null, e.toString());
                    return;
                    }   
                addEngArr.add(chicken);
                break;
            }
        }

    }//GEN-LAST:event_chickenActionPerformed

    private void MeatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MeatActionPerformed
        // TODO add your handling code here:
        switch (size) {
            case 3: {
                ingredient meat = new ingredient("meat", 200, 660);
                  pizzaClass p=new pizzaClass();
               try{
               ingredient.decrease(p.getMeat1().getWeight(),200,"meat");
                      }catch (quantityOutException1 e){
                JOptionPane.showMessageDialog(null, e.toString());
                    return;
                    }   
                addEngArr.add(meat);
                break;
            }
            case 2: {
                ingredient meat = new ingredient("meat", 142, 470);
                  pizzaClass p=new pizzaClass();
               try{
               ingredient.decrease(p.getMeat1().getWeight(),140,"meat");
                      }catch (quantityOutException1 e){
                JOptionPane.showMessageDialog(null, e.toString());
                    return;
                    }   
                addEngArr.add(meat);
                break;
            }
            case 1: {
                ingredient meat = new ingredient("meat", 100, 330);
                  pizzaClass p=new pizzaClass();
               try{
               ingredient.decrease(p.getMeat1().getWeight(),100,"meat");
                      }catch (quantityOutException1 e){
                JOptionPane.showMessageDialog(null, e.toString());
                    return;
                    }   
                addEngArr.add(meat);
                break;
            }
        }

    }//GEN-LAST:event_MeatActionPerformed

    private void PepperoniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PepperoniActionPerformed
        // TODO add your handling code here:
        switch (size) {
            case 3: {
                ingredient pepperoni = new ingredient("pepperoni", 50, 250);
                  pizzaClass p=new pizzaClass();
               try{
               ingredient.decrease(p.getPeppirone1().getWeight(),50,p.getPeppirone1().getName());
                      }catch (quantityOutException1 e){
                JOptionPane.showMessageDialog(null, e.toString());
                    return;
                    }   
                addEngArr.add(pepperoni);
                break;
            }
            case 2: {
                ingredient pepperoni = new ingredient("pepperoni", 35, 180);
                  pizzaClass p=new pizzaClass();
               try{
               ingredient.decrease(p.getPeppirone1().getWeight(),35,"pepperoni");
                      }catch (quantityOutException1 e){
                JOptionPane.showMessageDialog(null, e.toString());
                    return;
                    }   
                addEngArr.add(pepperoni);
                break;
            }
            case 1: {
                ingredient pepperoni = new ingredient("pepperoni", 25, 125);
                  pizzaClass p=new pizzaClass();
               try{
               ingredient.decrease(p.getPeppirone1().getWeight(),125,"pepperoni");
                      }catch (quantityOutException1 e){
                JOptionPane.showMessageDialog(null, e.toString());
                    return;
                    }   
                addEngArr.add(pepperoni);
                break;
            }
        }

    }//GEN-LAST:event_PepperoniActionPerformed

    private void confirmationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmationActionPerformed
        // TODO add your handling code here:
        double engCal = 0;
        int engWeight = 0;
        int numOfslice =Integer.parseInt(numOFslice.getText());
        try{
            pizzaClass.acceptNum(numOfslice);
        }catch (wrongEntryException e){
            JOptionPane.showMessageDialog(null, e.toString());
            return;
        }
       
        if (thickness == 2) {
            
            switch (size) {
                case 1:

                    dough smallDough = new dough("small", 200, "thick");
                    pan smallPan = new pan("small");
                    pizzaClass smallPizza = new pizzaClass(smallDough);
                    
                    
                {
                    try {
                        mixS.decDough(200);
                    } catch (quantityOutException ex) {
                        JOptionPane.showMessageDialog(null, ex.toString());
                        return;
                    }
                }
                    for (int i = 0; i < addEngArr.size(); i++) {
                        engCal += addEngArr.get(i).getAmountOfcalories();
                        engWeight += addEngArr.get(i).getWeight();
                    }
                    order.setText(smallPizza.pizzaFinal(engCal, engWeight,numOfslice));

                    break;

                case 2:
                    dough medumDough = new dough("medum", 350, "thick");
                    pan medumPan = new pan("medum");
                    pizzaClass medumPizza = new pizzaClass(medumDough);
                   // mixer mix=new mixer();
                {
                    try {
                        mixS.decDough(350);
                    } catch (quantityOutException ex) {
                       JOptionPane.showMessageDialog(null, ex.toString());
                       return;
                    }
                }
                    for (int i = 0; i < addEngArr.size(); i++) {
                        engCal += addEngArr.get(i).getAmountOfcalories();
                        engWeight += addEngArr.get(i).getWeight();
                    }
                    order.setText(medumPizza.pizzaFinal(engCal, engWeight,numOfslice));
                    break;

                case 3:
                 dough largDough = new dough("larg", 500, "thick");
                    pan largPan = new pan("larg");
                    pizzaClass largPizza = new pizzaClass(largDough);
                   // mixer mixL=new mixer();
                {
                    try {
                        mixS.decDough(500);
                    } catch (quantityOutException ex) {
                       JOptionPane.showMessageDialog(null, ex.toString());
                       return;
                    }
                }
                    for (int i = 0; i < addEngArr.size(); i++) {
                        engCal += addEngArr.get(i).getAmountOfcalories();
                        engWeight += addEngArr.get(i).getWeight();
                    }
                    order.setText(largPizza.pizzaFinal(engCal, engWeight,numOfslice));
                    break;

            }
        } else if (thickness == 1) {
            switch (size) {
                case 1:
                 dough smallDough = new dough("small", 100, "thin");
                    pan smallPan = new pan("small");
                    pizzaClass smallPizza = new pizzaClass(smallDough);
                   // mixer mixS=new mixer(); 
                {
                    try {
                        mixS.decDough(100);
                    } catch (quantityOutException ex) {
                       JOptionPane.showMessageDialog(null, ex.toString());
                       return;
                    }
                }
                    for (int i = 0; i < addEngArr.size(); i++) {
                        engCal += addEngArr.get(i).getAmountOfcalories();
                        engWeight += addEngArr.get(i).getWeight();
                    }
                    order.setText(smallPizza.pizzaFinal(engCal, engWeight,numOfslice));
                    break;

                case 2:
                    dough medumDough = new dough("medum", 250, "thick");
                    pan medumPan = new pan("medum");
                    pizzaClass medumPizza = new pizzaClass(medumDough);
                   // mixer mixM=new mixer();
                {
                    try {
                        mixS.decDough(250);
                    } catch (quantityOutException ex) {
                      JOptionPane.showMessageDialog(null, ex.toString());
                      return;
                    }
                }
                    for (int i = 0; i < addEngArr.size(); i++) {
                        engCal += addEngArr.get(i).getAmountOfcalories();
                        engWeight += addEngArr.get(i).getWeight();
                    }
                    order.setText(medumPizza.pizzaFinal(engCal, engWeight,numOfslice));
                    break;

                case 3:
                 dough largDough = new dough("larg", 300, "thick");
                    pan largPan = new pan("larg");
                    pizzaClass largPizza = new pizzaClass(largDough);
                    // mixer mixL=new mixer();
                {
                    try {
                        mixS.decDough(300);
                    } catch (quantityOutException ex) {
                       JOptionPane.showMessageDialog(null, ex.toString());
                       return;
                    }
                }
                    for (int i = 0; i < addEngArr.size(); i++) {
                        engCal += addEngArr.get(i).getAmountOfcalories();
                        engWeight += addEngArr.get(i).getWeight();
                    }
                    order.setText(largPizza.pizzaFinal(engCal, engWeight,numOfslice));
                    break;

            }
        }


    }//GEN-LAST:event_confirmationActionPerformed

    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "your order cancelled");
        order.setText(" ");
       
    }//GEN-LAST:event_CancelActionPerformed

    private void numOFsliceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numOFsliceActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_numOFsliceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(pizza.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(pizza.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(pizza.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(pizza.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new pizza().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cancel;
    private javax.swing.JCheckBox Meat;
    private javax.swing.JCheckBox Pepperoni;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chicken;
    private javax.swing.JButton confirmation;
    private javax.swing.JCheckBox garlic;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton larg;
    private javax.swing.JButton medum;
    private javax.swing.JCheckBox mozzarella;
    private javax.swing.JTextField numOFslice;
    private javax.swing.JCheckBox onion;
    private javax.swing.JTextArea order;
    private javax.swing.JCheckBox oregano;
    private javax.swing.JCheckBox sauce;
    private javax.swing.JButton small;
    private javax.swing.JButton thick;
    private javax.swing.JButton thin;
    private javax.swing.JCheckBox tomatoes;
    // End of variables declaration//GEN-END:variables
}
